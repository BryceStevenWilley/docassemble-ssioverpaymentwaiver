---
metadata:
  title: SSI Overpayment Waiver Request
  short title: Overpayment Waiver
---
objects:
  - recordee: Individual
  - overpaid_persons: DAList.using(object_type=Individual,there_is_another=False)
  - beneficiary: Individual
---
include:
  - financial_statement.yml
---
mandatory: True
code: |
  client.name.first
  client.work_number
  if has_spouse:
    spouse.name.first
  if household.there_are_any:
    review_household_members

  recordee.name.first
  overpaid_persons.there_are_any
  review_overpaid_persons
  
  overpayment_reason
  if informed_ssa:
    benefits_changed_after_contact
  first_overpayment

  possess_overpayment
  payment_type
  gave_cash_after_notice
  cant_return_explanation
  affordable_amount
  overpayment_pay_less_reasons
  received_ssi
  expect_change

  financial_statement_questions

  accounts_special_purpose
  assets_cannot_be_converted
  assets_cannot_be_sold
  signature_choice
  
  download_form
---
question: |
  Person on whose record the overpayment occurred
fields:
  - Somebody already mentioned: recordee
    datatype: object
    disable others: True
    choices: |
      everyone
  - First name: recordee.name.first
  - Middle name: recordee.name.middle
    required: False
  - Last name: recordee.name.last
---
question: |
  Person on whose record the overpayment occurred
fields:  
  - Social Security Number: recordee.ssn
---
question: |
  Are you the representative payee?
yesno: overpayment_is_rep_payee
---
question: |
  How were the overpaid benefits used?
fields:
  - no label: overpayment_benefits_used_for
    datatype: area
---
question: |
  Who is the beneficiary?
fields:
  - Somebody already mentioned: beneficiary
    datatype: object
    disable others: True
    choices: |
      everyone
  - First name: beneficiary.name.first
  - Last name: beneficiary.name.last
  - Address: beneficiary.address.address
    address autocomplete: True
  - Unit or Apt: beneficiary.address.unit
  - City: beneficiary.address.city
  - State: beneficiary.address.state
    code: |
      states_list()
  - Zip code: beneficiary.address.zip
  - County: beneficiary.address.county
    required: False      
---
question: |
  Overpaid person(s) making this request
subquestion: |
  Is there anyone who was overpaid other than ${recordee} and who
  is making this request?
yesno: overpaid_persons.there_are_any
---
question: |
  Who is the ${ordinal(i)} overpaid person?
fields:
  - Somebody already mentioned: overpaid_persons[i]
    datatype: object
    disable others: True
    choices: |
      everyone
  - First name: overpaid_persons[i].name.first
  - Middle name: overpaid_persons[i].name.middle
    required: False
  - Last name: overpaid_persons[i].name.last
  - Social Security Number: overpaid_persons[i].ssn
---
generic object: Individual
question: |
  Social Security Number for ${x}
subquestion: |
  What is ${x}'s Social Security Number?
fields:
  - SSN: x.ssn
---
question: |
  Overpaid Persons
subquestion: |
  ${ overpaid_persons.table }
  ${overpaid_persons.add_action()}
field: review_overpaid_persons
---
table: overpaid_persons.table
rows: overpaid_persons
columns:
  - Name: |
      row_item
  - Social Security Number: |
      row_item.ssn
edit:
  - row_item.name.first
  - row_item.ssn
---
question: |
  Who is the ${ordinal(i)} overpaid person?  
fields:
  - Social Security Number: overpaid_persons[i].ssn
---
question: |
  What happened to the overpaid checks or money?
fields:
  - Do you currently have any of the money you were overpaid? : possess_overpayment
    datatype: yesnoradio
  - When you received the overpayment notice, did you have any of the money you were overpaid?: possessed_overpayment_at_notice
    datatype: yesnoradio
---
question: |
  What kind of Social Security payments do you receive?
field: payment_type
choices:
  - Supplemental Security Income (SSI): SSI
  - SSDI or Social Security Retirement: other
---
question: |
  Acts you took after receiving the overpayment notice
fields:  
  - Did you lend or give away any property or cash after you received notice of the overpayment?: gave_cash_after_notice
    datatype: yesnoradio
  - Describe who received the property or cash, what it was and its value: gave_cash_after_notice_explanation
    datatype: area
    show if: gave_cash_after_notice
  - Did you receive or sell any property or receive any cash, other than earnings, after you received the notice of overpayment?: received_cash_after_notice
    datatype: yesnoradio
  - Describe the property and sale price, or amount of cash received: received_cash_after_notice_explanation
    datatype: area
    show if: received_cash_after_notice
---
question: |
  Overpayment
subquestion: |
  Using your own words, explain to the Social Security Administration 
  why you do not think you should have to return the overpayment amount.
fields:
  - Why do you think you should not have to return the overpayment amount?: cant_return_explanation
    datatype: area
---
question: |
  Your expenses are higher than your income
subquestion: |
  From the information you gave us, your monthly expenses
  are higher than your income. Explain how you are paying your bills
  below.
fields:
  - no label: expenses_exceed_income_explanation
    datatype: area
---
question: |
  Reasons that you should not pay the full overpayment amount
subquestion: |
  Check all of the below that apply.
fields:
  - no label: overpayment_pay_less_reasons
    datatype: checkboxes
    choices:
      - I cannot afford to pay back the money
      - The overpayment was not my fault
      - Requiring me to pay back the overpayment is unfair
---
code: |
  overpayment_not_my_fault = overpayment_pay_less_reasons['The overpayment was not my fault']
  overpayment_cant_afford = overpayment_pay_less_reasons['The overpayment was not my fault']
---
question: |
  How much can you afford to pay back each month?
fields:
  - no label: affordable_amount
    datatype: currency
---
question: |
  SSI Payments
fields:
  - Were you receiving SSI payments in the past?: received_ssi
    datatype: yesnoradio
  - Are you receiving SSI payments right now?: receives_ssi
    datatype: yesnoradio
---
question: |
  Explain why the overpayment happened
subquestion: |
  Use your own words to explain
fields:
  - What changed to cause the overpayment?: overpayment_reason
    choices:
      - I had too much money in a bank account
      - I worked too many hours
  - What do you know about how the overpayment happened?: overpayment_explanation
    datatype: area
  - Why was the overpayment not your fault?: overpayment_why_not_at_fault
    datatype: area
  - Why did you think you had a right to the money?: overpayment_why_had_right
    datatype: area
---
question: |
  Contact with Social Security Administration
subquestion: |
  You said that the reason for the overpayment was ${overpayment_reason}
fields:
  - Did you tell the Social Security Administration about ${overpayment_reason}?: informed_ssa
    datatype: yesnoradio
  - Why not?: did_not_inform_ssa_explanation
    datatype: area
    show if:
      variable: informed_ssa
      is: False
  - Did you speak to someone (by phone or in person) about ${overpayment_reason}?: informed_orally
    datatype: yesnoradio
  - How, when and where?: how_when_where
    show if:
      variable: informed_orally
      is: False
  - Who did you talk to?: who_spokewith
    show if: informed_orally
  - What did you say?: informed_what_said 
    datatype: area
    show if: informed_orally
---
question: |
  Follow-up
subquestion: |
  You said that you contacted the Social Security Administration
  to let them know about ${overpayment_reason}.
fields:
  - After you reported that ${overpayment_reason}, did the Social Security Administration change your benefits amount?: benefits_changed_after_contact
    datatype: yesnoradio
  - Did you contact the Social Security Administration to follow-up?: benefits_did_not_change_followed_up
    datatype: yesnoradio
    show if:  
      variable: benefits_changed_after_contact
      is: False
---
question: |
  Past overpayments
fields:
  - Is this the first time you have been overpaid?: first_overpayment
    datatype: yesnoradio
  - Why were you overpaid in the past?: past_overpayment_explanation
    datatype: area
    show if:
      variable: first_overpayment
      is: False
  - If the reason is similar to the reason you were overpaid this time, please explain what you did to prevent it.: past_overpayment_similar_explanation
    datatype: area
    show if:
      variable: first_overpayment
      is: False
      
---
comment: |
  Financial expectation and funds availability
question: |
  Changes to your financial situation
subquestion: |
  Please think about your financial situation and any changes, whether
  for the better or worse, that you expect in the next 6 months.
fields:
  - In the next 6 months, I expect I or a household member: expect_change
    datatype: checkboxes
    choices:
      - Will receive a large tax refund
      - Will have a large bill repaid to me
      - Will receive a pay raise
      - Will receive a pay cut
      - Will pay a major bill (such as house repairs)
      - Other financial change for the better
      - Other financial change for the worse
  - Explain: expect_change_explanation
    datatype: area
    required: False
---
code: |
  cash_assets = [asset for asset in assets if asset.type in ['savings','checking']]
  non_cash_assets = [asset for asset in assets if asset.type not in ['savings','checking']]
  fixed_assets = vehicles + real_estate
---
question: |
  Are any funds being saved for a special purpose?
subquestion: |
  You said that you or a household member have the following
  accounts that have cash on hand.
  
  Check any funds that are being saved for a special purpose.
fields:
  - no label: accounts_special_purpose
    datatype: object_checkboxes
    choices: cash_assets       
  - Explain what the special purpose is: accounts_special_purpose_explanation
    datatype: area        
    required: False
---
question: |
  Are there any assets with a balance or value that CANNOT be converted to cash?
subquestion: |
  You said that you or a household member have the following assets
  that have a "balance or value".

  Check any assets below that CANNOT be converted to cash.
fields:
  - no label: assets_cannot_be_converted
    datatype: object_checkboxes
    choices: non_cash_assets
  - Explain why the assets CANNOT be converted to cash: assets_cannot_be_converted_explanation
    datatype: area
    required: False
---
question: |
  Are there any assets that do not have a balance or value that CANNOT be sold or
  otherwise converted to cash?
subquestion: |
  You said that you or a household member have the following
  vehicles and real estate, other than the family car or house.

  Check any assets below that CANNOT be sold or otherwise converted
  to cash.
fields:
  - no label: assets_cannot_be_sold
    datatype: object_checkboxes
    choices: fixed_assets
  - Explain why the vehicle or property CANNOT be sold: assets_cannot_be_sold_explanation
    datatype: area
    required: False
---
generic object: Individual
question: |
  ${x}'s Contact Information
fields:
  - Work phone number: x.phone_work
    required: False
  - Home or cell phone number: x.phone_number
  - Address: x.address.address
    address autocomplete: True
  - Unit or Apt: x.address.unit
  - City: x.address.city
  - State: x.address.state
    code: |
      states_list()
  - Zip code: x.address.zip
  - County: x.address.county
    required: False
---
question: |
  Signature
subquestion: |
  Before you mail or deliver this form, you need to sign it.
fields:
  - Where do you want to sign?: signature_choice
    input type: radio
    default: phone
    choices:
      - Sign on this device: this device
      - Sign on paper after I print the forms: paper
      - Sign on my phone: phone
    show if: 
      code: |
        device().is_pc      
  - note: |
      To sign on your phone, point your phone camera at this barcode and click the 
      barcode or link icon that appears in the camera view. Click continue on your 
      phone.
      
      <center>
      ${interview_url_as_qr()}
      </center>

    show if: 
      code: |
        device().is_pc    
  - Or, text me a link at this phone number: link_cell
    show if: 
      code: |
        device().is_pc        
    required: false
  - note: |
      Once this screen has loaded on your mobile device, click continue.
    show if: 
      code: |
        not device().is_pc            
continue button field: saw_signature_choice
help: |
  Many smartphones will automatically find the link on this screen. The link
  may "float" up from the screen into a small icon you can click.
  If your phone does not do this, use the text option instead.
  
---
question: Sign on your phone
subquestion: |
  % if device().is_pc:
  Click continue on this screen once you have finished signing on your phone.
  % else:
  Click continue on this screen when you're ready to sign.
  % endif
  
field: signature_wait_screen  
---
question: Sign below
subquestion: |
signature: client.signature
under: |
  ${ client }
---
code: |
  client_support = client.incomes.total(type='other') > 0
  spouse_support = spouse.incomes.total(type='other') > 0
  household_support = household.incomes.total(type='other') > 0
    
  receives_support = client_support or spouse_support or household_support
  
  if receives_support:
    all_incomes = client.incomes + spouse.incomes + household.incomes
    support_sources = [income.name for income in all_incomes if income.type == 'other']
  else:
    support_sources = []
---
code: |
  client_pensions = client.incomes.matches('pension')
  spouse_pensions = spouse.incomes.matches('pension')
  household_pensions = household.incomes.matches('pension')
---
code: |
  savings = assets.matches('savings')
---
question: Here is your document.
event: download_form
attachment:
  - name: ssa-632_Converted
    filename: ssa-632_Converted
    pdf template file: ssa-632_Converted.pdf
    fields:
      - "record_owner": ${recordee}
      - "record_ssn": ${recordee.ssn}
      - "requestor_1": ${overpaid_persons.item(0)}
      - "requestor_1_ssn": ${overpaid_persons.item(0).ssn}
      - "requestor_2": ${overpaid_persons.item(1)}
      - "requestor_2_ssn": ${overpaid_persons.item(1).ssn}
      - "requestor_3": ${overpaid_persons.item(2)}
      - "requestor_3_ssn": ${overpaid_persons.item(2).ssn}
      - "requestor_4": ${overpaid_persons.item(3)}
      - "requestor_4_ssn": ${overpaid_persons.item(3).ssn}
      - "overpayment_not_my_fault": ${yesno(overpayment_not_my_fault)}
      - "overpayment_cant_afford_full_benefit": ${yesno(overpayment_cant_afford)}
      - "overpayment_affordable_amount": ${affordable_amount}
      - "overpayment_dont_receive_ssi": ${yesno(received_ssi)}
      - "overpayment_dont_receive_ssi_affordable_amount": ${affordable_amount}
      - "overpayment_receive_ssi": ${yesno(receives_ssi)}
      - "overpayment_receive_ssi_affordable_amount": ${affordable_amount}
      - "rep_received_benefits_no": ${noyes(overpayment_is_rep_payee)}
      - "rep_received_benefits_yes": ${yesno(overpayment_is_rep_payee)}
      - "beneficiary_name": ${beneficiary.name.full() + ' ' + beneficiary.address.block() }
      - "benefits_used_for": ${ overpayment_benefits_used_for}
      - "someone_else_lived_with_user_yes": No 
      - "someone_else_lived_with_user_no": No
      - "someone_else_user_received_benefits_no": No
      - "someone_else_user_received_benefits_yes": No
      - "someone_else_overpayment_explanation": ${ overpayment_explanation }
      - "why_thought_entitled": something
      - "told_ssa_yes": ${yesno(informed_ssa)}
      - "told_ssa_no": ${noyes(informed_ssa)}
      - "why_didnt_tel_ssa": ${ did_not_inform_ssa_explanation if not informed_ssa else '' }
      - "told_ssa_how": ${ informed_what_said if informed_ssa else '' }
      - "contacted_ssa_again_yes": No
      - "contacted_ssa_again_no": No
      - "overpaid_before_yes": ${noyes(first_overpayment)}
      - "overpaid_before_no": ${yesno(first_overpayment)}
      - "overpaid_before_ssn": something
      - "overpaid_before_steps_to_prevent": ${ past_overpayment_explanation}
      - "possess_money_yes": No
      - "possess_money_amount": something
      - "possess_money_no": No
      - "possessed_money_yes": No
      - "possessed_money_amount": something
      - "possessed_money_no": No
      - "why_can_keep": something
      - "gave_away_yes": No
      - "gave_away_no": No
      - "gave_away_details": No
      - "sold_yes": No
      - "sold_no": No
      - "sold_details": something
      - "receiving_benefits_yes": ${yesno(receives_ssi)}
      - "receiving_benefits_no": ${noyes( receives_ssi)}
      - "receiving_benefits_name": No
      - "receiving_benefits_claim_number": No
      - "dependent_1": ${household.item(0)}
      - "dependent_1_age": ${household.item(0).age}
      - "dependent_1_relationship": ${household.item(0).relationship}
      - "dependent_2": ${household.item(1)}
      - "dependent_2_age": ${household.item(1).age}
      - "dependent_2_relationship": ${household.item(1).relationship}
      - "dependent_3": ${household.item(2)}
      - "dependent_3_age": ${household.item(2).age}
      - "dependent_3_relationship": ${household.item(2).relationship}
      - "dependent_4": ${household.item(3)}
      - "dependent_4_age": ${household.item(3).age}
      - "dependent_4_relationship": ${household.item(3).relationship}
      - "asset_amount": something
      - "savings_owner_1": ${savings.item(0).owner}
      - "savings_amount_1": ${savings.item(0).balance}
      - "savings_monthly_1": ${savings.item(0).amount(period_to_use=12)}
      - "savings_explanation_1": something
      - "savings_owner_2": ${savings.item(1).owner}
      - "savings_amount_2": ${savings.item(1).balance}
      - "savings_monthly_2": ${savings.item(1).amount(period_to_use=12)}
      - "savings_explanation_2": something
      - "cd_explanation": something
      - "cd_owner": ${comma_and_list(assets.owners(type='cd'))}
      - "cd_amount": ${assets.balance_total(type='cd')}
      - "cd_monthly": ${assets.total(type='savings',period_to_use=12)}
      - "ira_owner": ${comma_and_list(assets.owners(type='ira'))}
      - "ira_amount": ${assets.balance_total(type='ira')}
      - "ira_monthly": ${assets.total(type='ira',period_to_use=12)}
      - "ira_explanation": something
      - "mutualfund_explanation": something
      - "mutalfund_owner": ${comma_and_list(assets.owners(type='mutual fund'))}
      - "mutualfund_amount": ${assets.balance_total(type='mutual fund')}
      - "mutualfund_monthly": ${assets.total(type='mutual fund',period_to_use=12)}
      - "stocks_explanation": something
      - "stocks_owner": ${comma_and_list(assets.owners(type='stocks'))}
      - "stocks_amount": ${assets.balance_total(type='stocks')}
      - "stocks_monthly": ${assets.total(type='stocks',period_to_use=12)}
      - "trust_explanation": something
      - "trust_owner": ${comma_and_list(assets.owners(type='trust'))}
      - "trust_amount": ${assets.balance_total(type='trust')}
      - "trust_monthly": ${assets.total(type='trust',period_to_use=12)}
      - "checking_owner": ${comma_and_list(assets.owners(type='checking'))}
      - "checking_amount": ${assets.balance_total(type='checking')}
      - "checking_monthly": ${assets.total(type='checking',period_to_use=12)}
      - "checking_explanation": something
      - "asset_other_owner": ${comma_and_list(assets.owners(type='other'))}
      - "asset_other_amount": ${assets.balance_total(type='other')}
      - "asset_other_monthly": ${assets.total(type='other',period_to_use=12)}
      - "asset_other_explanation": something
      - "asset_other_description": something
      - "countable_asset_total_amount": ${assets.balance_total()}
      - "countable_asset_total_monthly": ${assets.total(period_to_use=12)}
      - "vehicle_owner_1": ${vehicles.item(0).owner}
      - "vehicle_year_make_model_1": ${vehicles.item(0).year_make_model() }
      - "vehicle_pv_1": ${vehicles.item(0).value}
      - "vehicle_loan_balance_1": ${vehicles.item(0).balance}
      - "vehicle_purpose_1": ${vehicles.item(0).primary_purpose}
      - "vehicle_owner_2": camper, motorcycle, or any other vehicle or a boat, list below.2
      - "vehicle_year_make_model_2": ${vehicles.item(0).year_make_model() }
      - "vehicle_pv_2": ${vehicles.item(1).value}
      - "vehicle_loan_balance_2": ${vehicles.item(1).balance}
      - "vehicle_purpose_2": ${vehicles.item(1).primary_purpose}
      - "vehicle_owner_3": camper, motorcycle, or any other vehicle or a boat, list below.3
      - "vehicle_year_make_model_3": ${vehicles.item(0).year_make_model() }
      - "vehicle_pv_3": ${vehicles.item(2).value}
      - "vehicle_loan_balance_3": ${vehicles.item(2).balance}
      - "vehicle_purpose_3": ${vehicles.item(2).primary_purpose}
      - "real_property_owner_1": ${real_estate.item(0).owner}
      - "real_property_description_1": ${real_estate.item(0).description}
      - "real_property_value_1": ${real_estate.item(0).market_value}
      - "real_property_loan_balance_1": ${real_estate.item(0).balance}
      - "real_property_income_1": ${real_estate.item(0).amount(period_to_use=12)}
      - "real_property_owner_2": ${real_estate.item(1).owner}
      - "real_property_description_2": ${real_estate.item(1).description}
      - "real_property_value_2": ${real_estate.item(1).market_value}
      - "real_property_loan_balance_2": ${real_estate.item(2).balance}
      - "real_property_income_2": ${real_estate.item(0).amount(period_to_use=12)}
      - "real_property_owner_3": ${real_estate.item(2).owner}
      - "real_property_description_3": ${real_estate.item(2).description}
      - "real_property_value_3": ${real_estate.item(2).market_value}
      - "real_property_loan_balance_3": ${real_estate.item(2).balance}
      - "real_property_income_3": ${real_estate.item(2).amount(period_to_use=12)}
      - "real_property_owner_4": ${real_estate.item(3).owner}
      - "real_property_description_4": ${real_estate.item(3).description}
      - "real_property_value_4": ${real_estate.item(3).market_value}
      - "real_property_loan_balance_4":  ${real_estate.item(3).balance}
      - "real_property_income_4": ${real_estate.item(3).amount(period_to_use=12)}
      - "user_employed_yes": ${yesno(client.jobs.there_are_any)}
      - "user_employed_no": ${noyes( client.jobs.there_are_any)}
      - "user_wages_gross": ${client.jobs.total(period_to_use=12)}
      - "user_wages_net": ${client.jobs.net_total(period_to_use=12)}
      - "user_employer_name_address_phone": ${client.jobs.item(0).name_address_phone()}
      - "spouse_employed_yes": ${yesno(spouse.jobs.there_are_any)}
      - "spouse_employed_no": ${noyes( spouse.jobs.there_are_any)}
      - "spouse_wages_gross": ${spouse.jobs.total(period_to_use=12)}
      - "spouse_wages_net": ${spouse.jobs.net_total(period_to_use=12)}
      - "spouse_employer_name_address_phone": ${spouse.jobs.item(0).name_address_phone()}
      - "dependent_employed_yes": ${yesno(household.jobs.there_are_any)}
      - "dependent_employed_no": ${noyes( household.jobs.there_are_any)}
      - "dependent_employed_names": ${household.jobs.item(0).whose_job}
      - "dependent_wages_gross": ${household.jobs.gross_total()}
      - "dependent_wages_net": ${household.jobs.net_total()}
      - "dependent_employer_name_address_phone": ${household.jobs.item(0).name_address_phone()}
      - "receive_support_yes": ${yesno(receives_support)}
      - "receive_support_no": ${noyes( receives_support)}
      - "receive_support_source": ${comma_and_list(support_sources)}
      - "receive_support_amount": ${client.incomes.total(type='other support') + spouse.incomes.total(type='other support') + household.incomes.total(type='other support')}
      - "user_net_pay_total": ${client.jobs.net_total(period_to_use=12)}
      - "spouse_net_pay_total": ${spouse.jobs.net_total(period_to_use=12)}
      - "dependent_net_pay_total": ${household.jobs.net_total(period_to_use=12)}
      - "user_ss_total": ${client.incomes.total(period_to_use=12, type='SSR')}
      - "spouse_ss_total": ${spouse.incomes.total(period_to_use=12, type='SSR')}
      - "dependent_ss_total": ${household.incomes.total(period_to_use=12, type='SSR')}
      - "spouse_ssi_total": ${spouse.incomes.total(period_to_use=12, type='SSI')}
      - "user_ssi_total": ${client.incomes.total(period_to_use=12, type='SSI')}
      - "dependent_ssi_total": ${household.incomes.total(period_to_use=12, type='SSI')}
      - "pension_type_1": ${client_pensions.item(0).name + spouse_pensions.item(0).name + household_pensions.item(0).name}
      - "user_pension_1": ${client_pensions.item(0).amount(period_to_use=12)}
      - "spouse_pension_1": ${spouse_pensions.item(0).amount(period_to_use=12)}
      - "dependent_pension_1": ${household_pensions.item(0).amount(period_to_use=12)}
      - "pension_type_2": ${client_pensions.item(1).name.full() + ' ' + spouse_pensions.item(1).name.full() + ' ' +  household_pensions.item(1).name.full()}
      - "user_pension_2": ${client_pensions.item(1).amount(period_to_use=12)}
      - "spouse_pension_2": ${spouse_pensions.item(1).amount(period_to_use=12)}
      - "dependent_pension_2": ${household_pensions.item(1).amount(period_to_use=12)}
      - "other_assistance_type": ${client.incomes.matches('public assistance').item(0).name + ' ' + spouse.incomes.matches('public assistance').item(0).name + household.incomes.matches('public assistance').item(0).name}
      - "user_other_assistance": ${client.incomes.total(type='public assistance',period_to_use=12)}
      - "spouse_other_assistance": ${spouse.incomes.total(type='public assistance',period_to_use=12)}
      - "dependent_other_assistance": ${household.incomes.total(type='public assistance',period_to_use=12)}
      - "user_snap_total": ${client.incomes.total(type='SNAP',period_to_use=12)}
      - "spouse_snap_total": ${spouse.incomes.total(type='public assistance',period_to_use=12)}
      - "dependent_snap_total": ${household.incomes.total(type='public assistance',period_to_use=12)}
      - "user_rent_income_total": ${client.incomes.total(type='rent',period_to_use=12)}
      - "spouse_rent_income_total": ${spouse.incomes.total(type='rent',period_to_use=12)}
      - "dependent_rent_income_total": ${household.incomes.total(type='rent',period_to_use=12)}
      - "user_room_board_total": ${client.incomes.total(type='room and board',period_to_use=12)}
      - "spouse_room_board_total": ${spouse.incomes.total(type='room and board',period_to_use=12)}
      - "dependent_room_board_total": ${household.incomes.total(type='room and board',period_to_use=12)}
      - "user_child_support_total": ${client.incomes.total(type='child support',period_to_use=12)}
      - "spouse_child_support_total": ${spouse.incomes.total(type='child support',period_to_use=12)}
      - "dependent_child_support_total": ${household.incomes.total(type='child support',period_to_use=12)}
      - "user_other_support_total": ${client.incomes.total(type='other support',period_to_use=12)}
      - "spouse_other_support_total": ${spouse.incomes.total(type='other support',period_to_use=12)}
      - "dependent_other_support_total": ${household.incomes.total(type='other support',period_to_use=12)}
      - "user_asset_income_total": ${assets.total(owner=client,period_to_use=12)}
      - "spouse_asset_income_total": ${assets.total(owner=spouse,period_to_use=12)}
      - "dependent_asset_income_total": ${assets.total(period_to_use=12) - assets.total(owner=client,period_to_use=12) - assets.total(owner=spouse,period_to_use=12)}
      - "user_other_total": ${client.incomes.total(type='other',period_to_use=12)}
      - "spouse_other_total": ${spouse.incomes.total(type='other',period_to_use=12)}
      - "dependent_other_total": ${household.incomes.total(type='other',period_to_use=12)}
      - "user_income_total": ${client.incomes.total(period_to_use=12) + assets.total(owner=client,period_to_use=12) + client.jobs.total(period_to_use=12)}
      - "spouse_income_total": ${spouse.incomes.total(period_to_use=12) + assets.total(owner=spouse,period_to_use=12) + spouse.jobs.total(period_to_use=12)}
      - "dependent_income_total": ${household.incomes.total(period_to_use=12) + assets.total(period_to_use=12) - assets.total(owner=client,period_to_use=12) - assets.total(owner=spouse,period_to_use=12) + household.jobs.total(period_to_use=12)}
      - "None": something
      - "other_explanation": something
      - "expense_rent": ${expenses.total(type='rent',period_to_use=12)}
      - "expense_food": ${expenses.total(type='food',period_to_use=12)}
      - "expense_utilities": ${expenses.total(type='utilities',period_to_use=12)}
      - "expense_fuel": ${expenses.total(type='fuel',period_to_use=12)}
      - "expense_clothing": ${expenses.total(type='clothing',period_to_use=12)}
      - "expense_cc_minimum": ${expenses.total(type='credit cards',period_to_use=12)}
      - "expense_property_tax": ${expenses.total(type='property tax',period_to_use=12)}
      - "expense_fees": ${expenses.total(type='other taxes',period_to_use=12)}
      - "expense_insurance_1": ${expenses.matches('insurance').item(0).amount(period_to_use=12)}
      - "expense_insurance_2": ${expenses.matches('insurance').item(1).amount(period_to_use=12)}
      - "expense_medical": ${expenses.total(type='medical',period_to_use=12)}
      - "expense_car": ${expenses.total(type='auto',period_to_use=12)}
      - "expense_transportation": ${expenses.total(type='transportation',period_to_use=12)}
      - "expense_charity_1": ${expenses.matches('charity').item(0).amount(period_to_use=12)}
      - "expense_charity_2": ${expenses.matches('charity').item(1).amount(period_to_use=12)}
      - "expense_charity_3": ${expenses.matches('charity').item(2).amount(period_to_use=12)}
      - "expense_loan_1": ${expenses.matches('loan').item(0).amount(period_to_use=12)}
      - "expense_loan_2": ${expenses.matches('loan').item(1).amount(period_to_use=12)}
      - "expense_support_1": ${expenses.matches('support').item(0).amount(period_to_use=12)}
      - "expense_support_details": something
      - "expense_support_2": ${expenses.matches('support').item(1).amount(period_to_use=12)}
      - "expense_other_details": something
      - "expense_other":  ${expenses.total(type='other',period_to_use=12)}
      - "adjusted_expenses": something
      - "adjusted_monthly_expenses": something
      - "expenses_exceed_income_explanation": ${expenses_exceed_income_explanation}
      - "financial_situation_will_change_yes": ${yesno(expect_change)}
      - "financial_situation_will_change_no": ${noyes(expect_change)}
      - "cash_special_purpose_no_amount_on_hand": No
      - "cash_special_purpose_no_money": No
      - "cash_special_purpose_yes": No
      - "special_purpose_explanation": special purpose?
      - "cant_convert_countable_asset_yes": ${yesno(assets_cannot_be_converted)}
      - "cant_convert_countable_asset_no": ${noyes(assets_cannot_be_converted)}
      - "cant_convert_countable_asset_explanation": ${assets_cannot_be_converted_explanation}
      - "cant_convert_property_yes": ${yesno(assets_cannot_be_sold)}
      - "cant_convert_property_no": ${noyes(assets_cannot_be_sold)}
      - "cant_convert_property_explanation": ${assets_cannot_be_sold_explanation}
      - "remarks_continued": something
      - "remarks_continued_more": something
      - "signature_date": ${today()}
      - "phone_work": ${client.phone_work}
      - "phone_home": ${client.phone_number}
      - "user_mailing_address": ${client.address.address}
      - "user_city_state": ${client.address.city + ' ' + client.address.state}
      - "user_zip": ${ client.address.zip}
      - "user_county": ${ client.address.county}
